{"version":3,"sources":["components/Navbar.tsx","components/Home.tsx","components/Counter.tsx","components/GetFromApi.tsx","app/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Navbar","className","to","type","Home","Counter","useState","count","setCount","style","fontSize","fontWeight","onClick","GetFromApi","useEffect","fetchUsers","users","setUsers","a","fetch","response","ok","console","log","Error","json","scope","map","user","id","name","email","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"+MAwBeA,EAnBU,WACrB,OACI,qBAAKC,UAAU,6BAAf,SACI,uBAAMA,UAAU,wCAAhB,UACI,cAAC,IAAD,CAAMC,GAAG,IAAT,SACI,wBAAQD,UAAU,sBAAsBE,KAAK,SAA7C,oBAEJ,cAAC,IAAD,CAAMD,GAAG,WAAT,SACI,wBAAQD,UAAU,+BAA+BE,KAAK,SAAtD,uBAEJ,cAAC,IAAD,CAAMD,GAAG,gBAAT,SACI,wBAAQD,UAAU,+BAA+BE,KAAK,SAAtD,kCCILC,EAhBQ,WACnB,OACI,gCACI,6DACA,qBAAIH,UAAU,8BAAd,UACI,oBAAIA,UAAU,kBAAd,kCACA,oBAAIA,UAAU,kBAAd,mCACA,oBAAIA,UAAU,kBAAd,wBACA,oBAAIA,UAAU,kBAAd,0BACA,oBAAIA,UAAU,kBAAd,2B,QCYDI,EArBW,WAAO,IAAD,EACFC,mBAAiB,GADf,mBACrBC,EADqB,KACdC,EADc,KAW5B,OACI,gCACI,sBAAMC,MAAO,CAACC,SAAU,IAAKT,UAAU,oCAAvC,SAA4EM,IAC5E,wBAAQE,MAAO,CAACC,SAAU,GAAIC,WAAY,QAASV,UAAU,mBAAmBW,QAX/D,WACrBJ,EAASD,EAAQ,IAUb,uBACA,wBAAQE,MAAO,CAACC,SAAU,GAAIC,WAAY,QAASV,UAAU,sBAAsBW,QARtE,WACjBJ,EAASD,EAAQA,IAOb,uB,gCCyDGM,EAhEc,WAEzBC,qBAAU,WAENC,MAED,IAN4B,MAQLT,mBAAiB,IARZ,mBAQxBU,EARwB,KAQjBC,EARiB,KAUzBF,EAAU,uCAAG,8BAAAG,EAAA,+EAIYC,MAAM,wDAJlB,YAILC,EAJK,QAMEC,GANF,gBAQPC,QAAQC,IAAI,kCARL,4BAYD,IAAIC,MAZH,wBAgBiBJ,EAASK,OAhB1B,QAgBLT,EAhBK,OAiBXC,EAASD,GACTM,QAAQC,IAAIP,GAlBD,kDAsBXM,QAAQC,IAAI,4BAtBD,0DAAH,qDA2BhB,OACI,gCACI,6FACA,uBACA,wBAAOtB,UAAU,sBAAjB,UACI,gCACI,+BACI,oBAAIyB,MAAM,MAAV,qBACA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,2BAGR,gCACKV,EAAMW,KAAI,SAACC,GAAD,OACP,+BACI,6BAAKA,EAAKC,KACV,6BAAKD,EAAKE,OACV,6BAAKF,EAAKG,UAHLH,EAAKG,mBCxCvBC,EAdO,WAClB,OACI,eAAC,IAAD,WACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW/B,IACjC,cAAC,IAAD,CAAO6B,KAAK,WAAWC,OAAK,EAACC,UAAW9B,IACxC,cAAC,IAAD,CAAO4B,KAAK,gBAAgBC,OAAK,EAACC,UAAWtB,WCJvDuB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BjC,QAAQC,IACN,+GAKEqB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB3B,QAAQC,IAAI,sCAGRqB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAACC,GACNrC,QAAQqC,MAAM,4CAA6CA,MC7FjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDenB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,GAAN,sBAEP9B,IAgEV,SAAiCO,EAAeC,GAE9CzB,MAAMwB,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAC5B,GAEL,IAAMmD,EAAcnD,EAASkD,QAAQE,IAAI,gBAEnB,MAApBpD,EAASqD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAACC,GAClCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLpC,QAAQC,IAAI,oEAtFVuD,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjC1B,QAAQC,IACN,+GAMJmB,EAAgBC,EAAOC,OCrC/BmC,K","file":"static/js/main.420a5df5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Navbar: React.FC = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <form className=\"container-fluid justify-content-start\">\n                <Link to=\"/\">\n                    <button className=\"btn btn-primary m-3\" type=\"button\">Home</button>\n                </Link>\n                <Link to=\"/counter\">\n                    <button className=\"btn btn-sm btn-secondary m-3\" type=\"button\">Counter</button>\n                </Link>\n                <Link to=\"/get_from_api\">\n                    <button className=\"btn btn-sm btn-secondary m-3\" type=\"button\">Get From API</button>\n                </Link>\n            </form>\n        </nav>\n    );\n}\n\n\nexport default Navbar;","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nconst Home: React.FC = () => {\n    return (\n        <div>\n            <h1>This is a Demo App made in:</h1>\n            <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item\">ASP.NET Core with C#</li>\n                <li className=\"list-group-item\">React with TypeScript</li>\n                <li className=\"list-group-item\">PostgreSQL</li>\n                <li className=\"list-group-item\">GitHub Pages</li>\n                <li className=\"list-group-item\">Heroku</li>\n            </ul>\n        </div>\n    );\n}\n\n\nexport default Home;","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nconst Counter: React.FC = () => {\n    const [count, setCount] = useState<number>(0);\n\n    const incrementCounter = () => {\n        setCount(count + 1);\n    };\n\n    const resetCounter = () => {\n        setCount(count - count);\n    };\n\n    return (\n        <div>\n            <span style={{fontSize: 25}} className=\"badge rounded-pill bg-success m-4\">{count}</span>\n            <button style={{fontSize: 25, fontWeight: \"bold\"}} className=\"btn btn-info m-2\" onClick={incrementCounter}>Increment</button>\n            <button style={{fontSize: 25, fontWeight: \"bold\"}} className=\"btn btn-warning m-2\" onClick={resetCounter}>Reset</button>\n        </div>\n    );\n}\n\n\nexport default Counter;","import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\ninterface User {\n    id: number,\n    name: string,\n    email: string,\n    password: string\n};\n\n\nconst GetFromApi: React.FC = () => {\n\n    useEffect(() => {\n\n        fetchUsers();\n\n    }, []);\n\n    const [users, setUsers] = useState<User[]>([]);\n\n    const fetchUsers = async () => {\n\n        try {\n\n            const response = await fetch(\"https://asp-net-web-api-demo.herokuapp.com/api/user/\");\n\n            if (response.ok) {\n\n                console.log(\"Response Received ðŸ˜ƒ\");\n\n            } else {\n\n                throw new Error();\n\n            }\n\n            const users: User[] = await response.json();\n            setUsers(users);\n            console.log(users);\n\n        } catch (error) {\n\n            console.log(\"Bad Request ðŸ˜¥\");\n\n        }\n    };\n\n    return (\n        <div>\n            <h1>Fetching the list of Users from the ASP.NET Core Web API...</h1>\n            <br></br>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">User ID</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Email ID</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {users.map((user: User) => (\n                        <tr key={user.email}>\n                            <td>{user.id}</td>\n                            <td>{user.name}</td>\n                            <td>{user.email}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\n\nexport default GetFromApi;","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Navbar from \"../components/Navbar\";\nimport Home from \"../components/Home\";\nimport Counter from \"../components/Counter\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport GetFromApi from \"../components/GetFromApi\";\n\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <Navbar />\n            <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/counter\" exact component={Counter} />\n                <Route path=\"/get_from_api\" exact component={GetFromApi} />\n            </Switch>\n        </Router>\n    );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}